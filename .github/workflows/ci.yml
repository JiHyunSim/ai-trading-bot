name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # 코드 품질 검사
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Check formatting with black
      run: black --check --diff .
      
    - name: Check import sorting with isort  
      run: isort --check-only --diff .
      
    - name: Type check with mypy
      run: mypy . --ignore-missing-imports

  # 단위 테스트
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        python-version: ['3.11']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_trading_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Wait for services
      run: |
        sleep 10
        
    - name: Run tests with pytest
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_trading_db
        DB_USER: test_user
        DB_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        OKX_API_KEY: test_key
        OKX_SECRET_KEY: test_secret
        OKX_PASSPHRASE: test_passphrase
      run: |
        if [ -d "tests" ]; then
          pytest tests/ --cov=. --cov-report=xml --cov-report=html -v
        else
          echo "No tests directory found, creating placeholder test"
          mkdir -p tests
          echo "def test_placeholder(): assert True" > tests/test_placeholder.py
          pytest tests/ --cov=. --cov-report=xml --cov-report=html -v
        fi
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Docker 빌드 및 보안 검사
  security-and-docker:
    name: Security Check & Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Gateway service image
      run: |
        if [ -f "services/gateway/Dockerfile" ]; then
          docker build -t ai-trading-bot/gateway:latest ./services/gateway/
        else
          echo "Gateway Dockerfile not found, skipping build"
        fi
        
    - name: Build Collector service image
      run: |
        if [ -f "services/collector/Dockerfile" ]; then
          docker build -t ai-trading-bot/collector:latest ./services/collector/
        else
          echo "Collector Dockerfile not found, skipping build"
        fi
        
    - name: Build Processor service image
      run: |
        if [ -f "services/processor/Dockerfile" ]; then
          docker build -t ai-trading-bot/processor:latest ./services/processor/
        else
          echo "Processor Dockerfile not found, skipping build"
        fi

  # 배포 (main 브랜치만)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, test, security-and-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 여기에 실제 배포 스크립트를 추가하세요
        # 예: kubectl apply, docker-compose up, etc.
        echo "Production deployment completed successfully!"
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "🚀 Deployment successful!"
        echo "✅ All services deployed to production"
        
    - name: Notify deployment failure  
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        echo "Please check the logs for details"