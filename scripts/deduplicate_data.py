#!/usr/bin/env python3
"""
AI Trading Bot - Ï§ëÎ≥µ Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞ Ïä§ÌÅ¨Î¶ΩÌä∏
"""

import asyncio
import asyncpg
import sys
from datetime import datetime

async def deduplicate_data():
    """Ï§ëÎ≥µ Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞"""
    
    conn = await asyncpg.connect(
        host='localhost',
        port=5432,
        database='trading_bot',
        user='trading_bot',
        password='trading_bot_password'
    )
    
    try:
        print("üîß Ï§ëÎ≥µ Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞ ÏãúÏûë...")
        print("=" * 50)
        
        # Ï§ëÎ≥µ Ï†úÍ±∞ Ï†Ñ ÌÜµÍ≥Ñ
        before_count = await conn.fetchval("SELECT COUNT(*) FROM trading.candlesticks")
        print(f"üìä Ï†úÍ±∞ Ï†Ñ Ï¥ù Î†àÏΩîÎìú: {before_count:,}Í∞ú")
        
        # Ï§ëÎ≥µ Ï†úÍ±∞ ÏøºÎ¶¨ Ïã§Ìñâ
        print("\nüóëÔ∏è  Ï§ëÎ≥µ Î†àÏΩîÎìú Ï†úÍ±∞ Ï§ë...")
        
        # ÏûÑÏãú ÌÖåÏù¥Î∏î ÏÉùÏÑ± - Ïú†ÎãàÌÅ¨Ìïú Îç∞Ïù¥ÌÑ∞Îßå Î≥¥Í¥Ä
        await conn.execute("""
            CREATE TEMP TABLE temp_unique_candlesticks AS
            SELECT DISTINCT ON (symbol, timeframe, timestamp_ms)
                symbol,
                timeframe, 
                timestamp_ms,
                open_price,
                high_price,
                low_price,
                close_price,
                volume,
                MIN(created_at) as created_at  -- Í∞ÄÏû• Î®ºÏ†Ä ÏÉùÏÑ±Îêú ÏãúÍ∞Ñ Ïú†ÏßÄ
            FROM trading.candlesticks
            GROUP BY symbol, timeframe, timestamp_ms, open_price, high_price, low_price, close_price, volume
            ORDER BY symbol, timeframe, timestamp_ms, MIN(created_at)
        """)
        
        unique_count = await conn.fetchval("SELECT COUNT(*) FROM temp_unique_candlesticks")
        print(f"üìà Ïú†ÎãàÌÅ¨ Î†àÏΩîÎìú: {unique_count:,}Í∞ú")
        
        # Í∏∞Ï°¥ ÌÖåÏù¥Î∏î Î∞±ÏóÖ
        backup_table = f"candlesticks_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        print(f"üíæ Î∞±ÏóÖ ÌÖåÏù¥Î∏î ÏÉùÏÑ±: {backup_table}")
        
        await conn.execute(f"""
            CREATE TABLE trading.{backup_table} AS 
            SELECT * FROM trading.candlesticks
        """)
        
        # ÏõêÎ≥∏ ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
        print("üóëÔ∏è  ÏõêÎ≥∏ ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú...")
        await conn.execute("DELETE FROM trading.candlesticks")
        
        # Ïú†ÎãàÌÅ¨ Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ
        print("üì• Ïú†ÎãàÌÅ¨ Îç∞Ïù¥ÌÑ∞ ÏÇΩÏûÖ...")
        await conn.execute("""
            INSERT INTO trading.candlesticks 
            (symbol, timeframe, timestamp_ms, open_price, high_price, low_price, close_price, volume, created_at)
            SELECT symbol, timeframe, timestamp_ms, open_price, high_price, low_price, close_price, volume, created_at
            FROM temp_unique_candlesticks
            ORDER BY symbol, timeframe, timestamp_ms
        """)
        
        # ÏµúÏ¢Ö ÌÜµÍ≥Ñ
        after_count = await conn.fetchval("SELECT COUNT(*) FROM trading.candlesticks")
        removed_count = before_count - after_count
        
        print("\n‚úÖ Ï§ëÎ≥µ Ï†úÍ±∞ ÏôÑÎ£å!")
        print("=" * 50)
        print(f"üìä Ï†úÍ±∞ Ï†Ñ: {before_count:,}Í∞ú")
        print(f"üìä Ï†úÍ±∞ ÌõÑ: {after_count:,}Í∞ú") 
        print(f"üóëÔ∏è  Ï†úÍ±∞Îê®: {removed_count:,}Í∞ú ({(removed_count/before_count*100):.1f}%)")
        print(f"üíæ Î∞±ÏóÖ: trading.{backup_table}")
        
        # ÌÉÄÏûÑÌîÑÎ†àÏûÑÎ≥Ñ Ï†ïÎ¶¨Îêú ÌÜµÍ≥Ñ
        print("\nüìà Ï†ïÎ¶¨Îêú Îç∞Ïù¥ÌÑ∞ ÌÜµÍ≥Ñ:")
        stats = await conn.fetch("""
            SELECT symbol, timeframe, COUNT(*) as count,
                   MIN(timestamp_ms) as first_timestamp,
                   MAX(timestamp_ms) as last_timestamp
            FROM trading.candlesticks 
            GROUP BY symbol, timeframe
            ORDER BY symbol, timeframe
        """)
        
        for row in stats:
            first_time = datetime.fromtimestamp(row['first_timestamp']/1000)
            last_time = datetime.fromtimestamp(row['last_timestamp']/1000)
            print(f"  {row['symbol']} {row['timeframe']:>4}: {row['count']:>4}Í∞ú ({first_time.strftime('%m-%d %H:%M')} ~ {last_time.strftime('%m-%d %H:%M')})")
        
    except Exception as e:
        print(f"‚ùå Ïò§Î•ò Î∞úÏÉù: {e}")
        await conn.execute("ROLLBACK")
        return False
    finally:
        await conn.close()
    
    return True

if __name__ == "__main__":
    success = asyncio.run(deduplicate_data())
    sys.exit(0 if success else 1)